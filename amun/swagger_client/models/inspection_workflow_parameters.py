# coding: utf-8

"""
    Amun API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from amun.swagger_client.configuration import Configuration


class InspectionWorkflowParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dockerfile': 'str',
        'inspection_id': 'str',
        'specification': 'str',
        'batch_size': 'str',
        'batch_name': 'str',
        'allowed_failures': 'str',
        'parallelism': 'str',
        'cpu': 'str',
        'cpu_family': 'int',
        'cpu_model': 'int',
        'memory': 'str',
        'physical_cpus': 'int',
        'processor': 'str',
        'registry': 'str',
        'thoth_infra_namespace': 'str',
        'target': 'str'
    }

    attribute_map = {
        'dockerfile': 'dockerfile',
        'inspection_id': 'inspection-id',
        'specification': 'specification',
        'batch_size': 'batch-size',
        'batch_name': 'batch-name',
        'allowed_failures': 'allowed-failures',
        'parallelism': 'parallelism',
        'cpu': 'cpu',
        'cpu_family': 'cpu-family',
        'cpu_model': 'cpu-model',
        'memory': 'memory',
        'physical_cpus': 'physical-cpus',
        'processor': 'processor',
        'registry': 'registry',
        'thoth_infra_namespace': 'thoth-infra-namespace',
        'target': 'target'
    }

    def __init__(self, dockerfile=None, inspection_id=None, specification=None, batch_size='1', batch_name=None, allowed_failures='1', parallelism='1', cpu=None, cpu_family=None, cpu_model=None, memory=None, physical_cpus=None, processor=None, registry='docker-registry.default.svc:5000', thoth_infra_namespace=None, target='inspection-result', local_vars_configuration=None):  # noqa: E501
        """InspectionWorkflowParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dockerfile = None
        self._inspection_id = None
        self._specification = None
        self._batch_size = None
        self._batch_name = None
        self._allowed_failures = None
        self._parallelism = None
        self._cpu = None
        self._cpu_family = None
        self._cpu_model = None
        self._memory = None
        self._physical_cpus = None
        self._processor = None
        self._registry = None
        self._thoth_infra_namespace = None
        self._target = None
        self.discriminator = None

        self.dockerfile = dockerfile
        self.inspection_id = inspection_id
        self.specification = specification
        if batch_size is not None:
            self.batch_size = batch_size
        if batch_name is not None:
            self.batch_name = batch_name
        if allowed_failures is not None:
            self.allowed_failures = allowed_failures
        if parallelism is not None:
            self.parallelism = parallelism
        if cpu is not None:
            self.cpu = cpu
        if cpu_family is not None:
            self.cpu_family = cpu_family
        if cpu_model is not None:
            self.cpu_model = cpu_model
        if memory is not None:
            self.memory = memory
        if physical_cpus is not None:
            self.physical_cpus = physical_cpus
        if processor is not None:
            self.processor = processor
        if registry is not None:
            self.registry = registry
        if thoth_infra_namespace is not None:
            self.thoth_infra_namespace = thoth_infra_namespace
        if target is not None:
            self.target = target

    @property
    def dockerfile(self):
        """Gets the dockerfile of this InspectionWorkflowParameters.  # noqa: E501

        Dockerfile.  # noqa: E501

        :return: The dockerfile of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._dockerfile

    @dockerfile.setter
    def dockerfile(self, dockerfile):
        """Sets the dockerfile of this InspectionWorkflowParameters.

        Dockerfile.  # noqa: E501

        :param dockerfile: The dockerfile of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dockerfile is None:  # noqa: E501
            raise ValueError("Invalid value for `dockerfile`, must not be `None`")  # noqa: E501

        self._dockerfile = dockerfile

    @property
    def inspection_id(self):
        """Gets the inspection_id of this InspectionWorkflowParameters.  # noqa: E501

        ID of the inspection.  # noqa: E501

        :return: The inspection_id of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._inspection_id

    @inspection_id.setter
    def inspection_id(self, inspection_id):
        """Sets the inspection_id of this InspectionWorkflowParameters.

        ID of the inspection.  # noqa: E501

        :param inspection_id: The inspection_id of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and inspection_id is None:  # noqa: E501
            raise ValueError("Invalid value for `inspection_id`, must not be `None`")  # noqa: E501

        self._inspection_id = inspection_id

    @property
    def specification(self):
        """Gets the specification of this InspectionWorkflowParameters.  # noqa: E501

        Inspection specification.  # noqa: E501

        :return: The specification of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._specification

    @specification.setter
    def specification(self, specification):
        """Sets the specification of this InspectionWorkflowParameters.

        Inspection specification.  # noqa: E501

        :param specification: The specification of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and specification is None:  # noqa: E501
            raise ValueError("Invalid value for `specification`, must not be `None`")  # noqa: E501

        self._specification = specification

    @property
    def batch_size(self):
        """Gets the batch_size of this InspectionWorkflowParameters.  # noqa: E501

        Size of the batch.  # noqa: E501

        :return: The batch_size of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this InspectionWorkflowParameters.

        Size of the batch.  # noqa: E501

        :param batch_size: The batch_size of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """

        self._batch_size = batch_size

    @property
    def batch_name(self):
        """Gets the batch_name of this InspectionWorkflowParameters.  # noqa: E501

        Name of the batch.  # noqa: E501

        :return: The batch_name of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._batch_name

    @batch_name.setter
    def batch_name(self, batch_name):
        """Sets the batch_name of this InspectionWorkflowParameters.

        Name of the batch.  # noqa: E501

        :param batch_name: The batch_name of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """

        self._batch_name = batch_name

    @property
    def allowed_failures(self):
        """Gets the allowed_failures of this InspectionWorkflowParameters.  # noqa: E501

        Number of allowed failures.  # noqa: E501

        :return: The allowed_failures of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._allowed_failures

    @allowed_failures.setter
    def allowed_failures(self, allowed_failures):
        """Sets the allowed_failures of this InspectionWorkflowParameters.

        Number of allowed failures.  # noqa: E501

        :param allowed_failures: The allowed_failures of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """

        self._allowed_failures = allowed_failures

    @property
    def parallelism(self):
        """Gets the parallelism of this InspectionWorkflowParameters.  # noqa: E501

        Number of inspection that can run in parallel.  # noqa: E501

        :return: The parallelism of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this InspectionWorkflowParameters.

        Number of inspection that can run in parallel.  # noqa: E501

        :param parallelism: The parallelism of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """

        self._parallelism = parallelism

    @property
    def cpu(self):
        """Gets the cpu of this InspectionWorkflowParameters.  # noqa: E501

        CPU cores requested for the build.  # noqa: E501

        :return: The cpu of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this InspectionWorkflowParameters.

        CPU cores requested for the build.  # noqa: E501

        :param cpu: The cpu of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """

        self._cpu = cpu

    @property
    def cpu_family(self):
        """Gets the cpu_family of this InspectionWorkflowParameters.  # noqa: E501

        Family number of CPU.  # noqa: E501

        :return: The cpu_family of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: int
        """
        return self._cpu_family

    @cpu_family.setter
    def cpu_family(self, cpu_family):
        """Sets the cpu_family of this InspectionWorkflowParameters.

        Family number of CPU.  # noqa: E501

        :param cpu_family: The cpu_family of this InspectionWorkflowParameters.  # noqa: E501
        :type: int
        """

        self._cpu_family = cpu_family

    @property
    def cpu_model(self):
        """Gets the cpu_model of this InspectionWorkflowParameters.  # noqa: E501

        Modelnumber of CPU.  # noqa: E501

        :return: The cpu_model of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: int
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):
        """Sets the cpu_model of this InspectionWorkflowParameters.

        Modelnumber of CPU.  # noqa: E501

        :param cpu_model: The cpu_model of this InspectionWorkflowParameters.  # noqa: E501
        :type: int
        """

        self._cpu_model = cpu_model

    @property
    def memory(self):
        """Gets the memory of this InspectionWorkflowParameters.  # noqa: E501

        Memory requested for build.  # noqa: E501

        :return: The memory of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this InspectionWorkflowParameters.

        Memory requested for build.  # noqa: E501

        :param memory: The memory of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """

        self._memory = memory

    @property
    def physical_cpus(self):
        """Gets the physical_cpus of this InspectionWorkflowParameters.  # noqa: E501

        Number of physical CPUs.  # noqa: E501

        :return: The physical_cpus of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: int
        """
        return self._physical_cpus

    @physical_cpus.setter
    def physical_cpus(self, physical_cpus):
        """Sets the physical_cpus of this InspectionWorkflowParameters.

        Number of physical CPUs.  # noqa: E501

        :param physical_cpus: The physical_cpus of this InspectionWorkflowParameters.  # noqa: E501
        :type: int
        """

        self._physical_cpus = physical_cpus

    @property
    def processor(self):
        """Gets the processor of this InspectionWorkflowParameters.  # noqa: E501

        Name of processor.  # noqa: E501

        :return: The processor of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this InspectionWorkflowParameters.

        Name of processor.  # noqa: E501

        :param processor: The processor of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """

        self._processor = processor

    @property
    def registry(self):
        """Gets the registry of this InspectionWorkflowParameters.  # noqa: E501

        Registry server from where Image is to be pulled.  # noqa: E501

        :return: The registry of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this InspectionWorkflowParameters.

        Registry server from where Image is to be pulled.  # noqa: E501

        :param registry: The registry of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """

        self._registry = registry

    @property
    def thoth_infra_namespace(self):
        """Gets the thoth_infra_namespace of this InspectionWorkflowParameters.  # noqa: E501

        Project where ImageStream is present.  # noqa: E501

        :return: The thoth_infra_namespace of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._thoth_infra_namespace

    @thoth_infra_namespace.setter
    def thoth_infra_namespace(self, thoth_infra_namespace):
        """Sets the thoth_infra_namespace of this InspectionWorkflowParameters.

        Project where ImageStream is present.  # noqa: E501

        :param thoth_infra_namespace: The thoth_infra_namespace of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """

        self._thoth_infra_namespace = thoth_infra_namespace

    @property
    def target(self):
        """Gets the target of this InspectionWorkflowParameters.  # noqa: E501


        :return: The target of this InspectionWorkflowParameters.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this InspectionWorkflowParameters.


        :param target: The target of this InspectionWorkflowParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["inspection-build", "inspection-result"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and target not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `target` ({0}), must be one of {1}"  # noqa: E501
                .format(target, allowed_values)
            )

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionWorkflowParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InspectionWorkflowParameters):
            return True

        return self.to_dict() != other.to_dict()
